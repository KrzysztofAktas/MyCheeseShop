@page "/checkout"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Components.Account.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject UserProvider UserProvider
@inject OrderProvider OrderProvider
@inject ShoppingCart ShoppingCart
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject CheeseProvider CheeseProvider
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Checkout - EasyBriezy</PageTitle>

<!-- Shopping Cart Items -->
<div class="container my-5">
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var item in ShoppingCart.GetItems())
        {
            <div class="col">
                <div class="card border-dark h-100 border-0 shadow">
                    <!-- Product Image -->
                    <img src="@item.Cheese.ImageUrl" class="card-img-top" alt="@item.Cheese.Name" style="object-fit: cover;">
                    <!-- Card Body -->
                    <div class="card-body text-center">
                        <h5 class="card-title">@item.Cheese.Name</h5>
                        <p class="card-text">
                            <span class="badge bg-warning text-dark">@item.Cheese.Price.ToString("C")</span>
                            <span class="badge bg-info">@item.Quantity.ToString("0.# kg")</span>
                            <span class="badge bg-success">@item.Total.ToString("C")</span>
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delivery and Payment Details -->
<div class="container my-5">
    <div class="row">
        <!-- Delivery Details -->
        <div class="col-md-4 mb-3">
            <div class="card border-dark h-100 shadow">
                <div class="card-header bg-dark text-white text-center">
                    <h4>Delivery Details</h4>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><strong>Name:</strong> @user.FirstName</li>
                    <li class="list-group-item"><strong>Address:</strong> @user.Address</li>
                    <li class="list-group-item"><strong>City:</strong> @user.City</li>
                    <li class="list-group-item"><strong>Postcode:</strong> @user.PostCode</li>
                </ul>
                <div class="card-footer bg-dark text-white text-center">
                    <strong>Estimated Delivery:</strong> 2-3 Days
                </div>
            </div>
        </div>
        <!-- Payment Details -->
        <div class="col-md-8">
            <div class="card border-dark h-100 shadow">
                <div class="card-body">
                    <h4 class="text-center mb-4">Payment Details</h4>
                    <EditForm OnValidSubmit="MakePayment" Model="paymentDetails">
                        <div class="row g-3">
                            <div class="col-md-12 mb-3">
                                <label for="name" class="form-label">Name On Card</label>
                                <InputText class="form-control" placeholder="Name On Card" @bind-Value="paymentDetails.NameOnCard" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="cardnumber" class="form-label">Card Number</label>
                                <InputText type="cardnumber" class="form-control" placeholder="Card Number" @bind-Value="paymentDetails.CardNumber" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="expirydate" class="form-label">Expiry Date</label>
                                <InputText type="expirydate" class="form-control" placeholder="MM/YY" @bind-Value="paymentDetails.ExpiryDate" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="securitycode" class="form-label">Security Code</label>
                                <InputText type="securitycode" class="form-control" placeholder="CVV" @bind-Value="paymentDetails.SecurityCode" />
                            </div>
                            <div class="col-md-3">
                                <button type="submit" class="btn btn-light btn-outline-dark w-100">Make Payment</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>







@code {

    private decimal total;
    private User user;
    private PaymentDetails paymentDetails;
    private EditContext editContext;
    private bool isPaying;

    protected override async Task OnInitializedAsync()
    {
        paymentDetails = new PaymentDetails();
        editContext = new EditContext(paymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
        var items = ShoppingCart.GetItems();
    }

    private async Task MakePayment()
    {
        await SimulatePayment();

        await OrderProvider.CreateOrder(user, ShoppingCart.GetItems());
        ShoppingCart.Clear();
        NavigationManager.NavigateTo("/thank-you");
    }

    private async Task SimulatePayment()
    {
        isPaying = true;
        StateHasChanged();

        await Task.Delay(500);

        isPaying = false;
        StateHasChanged();
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }


    private sealed class PaymentDetails
    {
        [Required(ErrorMessage = "Please provide the name on the card.")]
        public string NameOnCard { get; set; }

        [Required(ErrorMessage = "Please provide the card number.")]
        [CreditCard(ErrorMessage = "Invalid card number.")]
        public string CardNumber { get; set; }

        [Required(ErrorMessage = "Please provide the expiry date.")]
        [RegularExpression(@"^(0[1-9]|1[0-2])\/\d{2}$", ErrorMessage = "Invalid expiry date. Use MM/YY format.")]
        public string ExpiryDate { get; set; }

        [Required(ErrorMessage = "Please provide the security code.")]
        [RegularExpression(@"^\d{3,4}$", ErrorMessage = "Invalid security code.")]
        public string SecurityCode { get; set; }
    }



    private string GetFormattedName(User user)
    {
        return $"{user.FirstName} {user.LastName}";
    }

    private string GetFormattedAddress(User user)
    {
        return $"{user.Address}{Environment.NewLine}{user.City}{Environment.NewLine}{user.PostCode}";
    }



    


    protected override void OnAfterRender(bool firstRender)
    {
        StateHasChanged();
    }
}