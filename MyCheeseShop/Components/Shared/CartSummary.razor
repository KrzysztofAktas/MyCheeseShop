@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Model
@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="container mt-4">
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total</th>
                @if (IsEditable)
                {
                    <th scope="col">Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ShoppingCart.GetItems())
            {
                <tr>
                    <td>
                        <img src="@item.Cheese.ImageUrl" class="img-thumbnail" alt="@item.Cheese.Name" />
                        @item.Cheese.Name
                    </td>
                    <td>@item.Cheese.Price.ToString("C")</td>
                    <td>@(item.Quantity * 100)g</td>
                    <td>@item.Total.ToString("C")</td>
                    @if (IsEditable)
                    {
                        <td>
                            <button class="btn btn-success" @onclick="() => IncreaseQuantity(item)">+</button>
                            <button class="btn btn-info" @onclick="() => DecreaseQuantity(item)">-</button>
                            <button class="btn btn-danger" @onclick="() => RemoveItem(item)">x</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="d-flex justify-content-between align-items-center mt-4">
    <button @onclick="GoToStore" class="btn btn-light btn-outline-dark">🧀 Back to cheeses</button>
    <h4 class="mb-0">Total: @(ShoppingCart.Total().ToString("C"))</h4>
</div>




@code {
    [Parameter]
    public bool IsEditable { get; set; } = false;

    protected override void OnInitialized()
    {
        ShoppingCart.OnCartUpdated += async () => await CartUpdated();
    }

    private async Task CartUpdated()
    {
        StateHasChanged();
        await ProtectedSessionStore.SetAsync("cart", ShoppingCart.GetItems());
    }

    private void RemoveItem(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese);
    }

    private void IncreaseQuantity(CartItem item)
    {
        ShoppingCart.AddItem(item.Cheese, 1);
    }

    private void DecreaseQuantity(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese, 1);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        StateHasChanged();
    }

    private void GoToStore()
    {
        NavigationManager.NavigateTo("/");
    }

    

}
