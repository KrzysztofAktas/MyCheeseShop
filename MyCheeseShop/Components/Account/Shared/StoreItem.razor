@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Model
﻿@using MyCheeseShop.Context
@inject ShoppingCart ShoppingCart
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject CheeseProvider CheeseProvider


<div class="col">
    <div class="card  border-dark mb-3" style="max-width: 18rem;">
        <div class="card text-bg-light  h-100">
            <img src="@Cheese.ImageUrl" class="card-img-top p-1" alt="@Cheese.Name" onerror="this.onerror = null; this.src='/img/no_cheese.png'">
            <div class="card-body d-flex flex-column">
                <h5>
                    <span class="badge badge bg-info-subtle text-info-emphasis">@Cheese.Type</span>
                    <span class="badge @GetStrengthBadgeColor(Cheese.Strength)">@Cheese.Strength</span>
                </h5>
                <div class="d-flex flex-column flex-sm-row justify-content-between">
                    <h5 class="card-title">@Cheese.Name</h5>
                    <h5><span class="badge bg-warning-subtle text-warning-emphasis">@Cheese.Price.ToString("C")</span></h5>
                </div>
                <p class="card-text">@Cheese.Description</p>
                <div class="mt-auto"></div>
                <EditForm Model="quantity" OnSubmit="AddToCart">
                    <div class="row">
                        <div class="col-lg-6 col-12">
                            <InputSelect class="form-select w-100" @bind-Value="quantity" required>
                                @for (var i = 1; i <= 5; i++)
                                {
                                    <option value="@i">@(i * 100)g</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-lg-6 col-12 mt-lg-0 mt-1">
                            <button class="btn btn-warning btn-outline-dark position-relative w-100">
                                Add to cart
                                @if (ShoppingCart.GetQuantity(Cheese) > 0)
                                {
                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                        @(ShoppingCart.GetQuantity(Cheese) * 100)g
                                        <span class="visually-hidden">@Cheese.Name in shopping cart</span>
                                    </span>
                                }
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>






@code {
    public IQueryable<Cheese>? Cheeses { get; set; }

    [Parameter]
    public Cheese Cheese { get; set; }

    private int quantity = 1;

    public async Task AddToCart()
    {
        ShoppingCart.AddItem(Cheese, quantity);
        await ProtectedSessionStore.SetAsync("cart", ShoppingCart.GetItems());
    }

    public string GetStrengthBadgeColor(string strength)
    {
        switch (strength.ToLower())
        {
            case "medium":
                return "badge bg-warning ";
            case "mild":
                return "badge bg-success";
            case "strong":
                return "badge bg-danger";
            default:
                return "badge bg-primary";
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await GetCheeses();
    }

    private async Task GetCheeses()
    {
        Cheeses = (await CheeseProvider.GetAllCheesesAsync()).AsQueryable();
    }


}
